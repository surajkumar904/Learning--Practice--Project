create database company;
drop company;

create table employee(
	emp_id int,
    emp_name varchar(20), 
    dept_name varchar(20),
    salary int
    );
drop table employee;   

INSERT INTO Employee (emp_id, emp_name, dept_name, salary)
VALUES
    (1, 'John Doe', 'Sales', 50000.00),
    (2, 'Jane Smith', 'HR', 55000.00),
    (3, 'Bob Johnson', 'IT', 60000.00),
    (4, 'Alice Brown', 'Marketing', 48000.00),
    (5, 'Charlie Wilson', 'Finance', 62000.00),
    (6, 'Eva Davis', 'IT', 58000.00),
    (7, 'Frank Adams', 'Sales', 51000.00),
    (8, 'Grace Lee', 'HR', 56000.00),
    (9, 'David Moore', 'Finance', 63000.00),
    (10, 'Helen Clark', 'Marketing', 49000.00);
                            
select dept_name, max(salary) as max_salary
from employee
group by dept_name;

select e.*, 
max(salary) over() as max_salary
from employee e;

select e.*, 
max(salary) over(partition by dept_name) as max_salary
from employee e;

select e.*, 
min(salary) over(partition by dept_name) as max_salary
from employee e;

select e.*, 
avg(salary) over(partition by dept_name) as max_salary
from employee e;

--- Row_Number, Rank, Dense_rank, lead, lag ---

select e.*,
row_number() over () as rn
from employee e; 

select e.*,
row_number() over (partition by dept_name) as rn
from employee e; 

-- Fetch the first 2 employees from each department to join the company 

select * from(
	select e.*,
	row_number() over (partition by dept_name order by emp_id) as rn
	from employee e) x
where x.rn<3;

-- Fetch the top 3 employees in each department earning the max salary

select e.*,
rank() over (partition by dept_name order by salary desc) as rnk
from employee e;

select * from(
	select e.*,
    rank() over (partition by dept_name order by salary desc) as rnk
    from employee e) x
where x.rnk < 4;

select e.*,
    rank() over (partition by dept_name order by salary desc) as rnk,
    dense_rank() over(partition by dept_name order by salary desc) as dense_rnk
    from employee e; 

select e.*,
    rank() over (partition by dept_name order by salary desc) as rnk,
    dense_rank() over(partition by dept_name order by salary desc) as dense_rnk,
    row_number() over(partition by dept_name order by salary desc) as row_no
    from employee e;

-- Fetch a query to display if the salary of an employee is higher, lower or equal to the previous employee

select e.*, 
lag (salary,2,0) over (partition by dept_name order by emp_id) as prev_emp_salary
from employee e;

select e.*, 
lead (salary,2,0) over (partition by dept_name order by emp_id) as next_emp_salary
from employee e;

select e.*, 
lag (salary) over (partition by dept_name order by emp_id) as prev_emp_salary,
lead (salary) over (partition by dept_name order by emp_id) as next_emp_salary
from employee e;

select e.*, 
lag (salary) over (partition by dept_name order by emp_id) as prev_emp_salary,
case when e.salary > lag (salary) over (partition by dept_name order by emp_id) then 'higher than prvious employee'
	when e.salary < lag (salary) over (partition by dept_name order by emp_id) then 'lower than prvious employee'
    when e.salary = lag (salary) over (partition by dept_name order by emp_id) then 'same as than prvious employee'
    end sal_range
from employee e;
